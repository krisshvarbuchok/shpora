const VirtualDOM = () => {


    return (
        <>
           <div className="text-blok">
                <h1>Virtual DOM</h1>
                <p><strong>Виртуальный DOM (VDOM, "Document Object Model" (объектная модель документа))</strong> — это концепция программирования, в которой «виртуальное» представление пользовательского интерфейса хранится в памяти и синхронизируется с «настоящим» DOM при помощи библиотеки, такой как ReactDOM.</p>
                <p>Когда ты открываешь веб-страницу в браузере, браузер создает структуру документа, которую можно представить в виде дерева элементов. Эти элементы - это HTML-теги, например, div, p, h1 и другие. DOM позволяет нам манипулировать этой структурой, изменять содержимое, стили, добавлять и удалять элементы.</p>
                <p>React создает <strong>виртуальное</strong> дерево элементов, которое точно соответствует текущему состоянию компонентов. Затем React <strong>сравнивает</strong> это виртуальное дерево с реальным DOM и определяет, какие изменения необходимо внести.</p>
                <ul>Преимущества:
                    <li><strong>Эффективность</strong>: Виртуальный DOM позволяет React <strong>оптимизировать</strong> обновление DOM. Вместо того, чтобы изменять каждый элемент по отдельности, React находит минимальный набор изменений, которые необходимо внести, и применяет их к реальному DOM. Это снижает нагрузку на браузер и улучшает производительность приложения.</li>
                    <li><strong>Удобство программирования</strong>: Работа с виртуальным DOM <strong>упрощает</strong> разработку. Ты можешь думать о компонентах и их состояниях, не беспокоясь о том, как React будет обновлять реальный DOM. React самостоятельно заботится об эффективных изменениях.</li>
                    <li><strong>Переносимость</strong>: Виртуальный DOM абстрагирует тебя от различий в реализации DOM в разных браузерах. Ты можешь писать свое приложение, не думая о том, какой браузер будет его запускать. React самостоятельно обрабатывает эти различия.</li>
                </ul>
                <h1>Reconciliation</h1>
                <p><strong>Reconciliation</strong> - это процесс, при котором React <strong>сравнивает предыдущее состояние</strong> компонента с <strong>новым состоянием</strong> и определяет, какие изменения нужно внести в пользовательский интерфейс.</p>
                <ul>
                    <li><strong>Обновление состояния</strong>: Когда состояние компонента изменяется, React запускает процесс reconciliation. Он сравнивает предыдущее состояние компонента с новым состоянием, чтобы определить, какие части интерфейса нужно обновить.</li>
                    <li><strong>Сравнение элементов</strong>: React сравнивает элементы, которые представляют компоненты, и их дочерние элементы. Он анализирует их типы, свойства и ключи, чтобы понять, какие элементы нужно обновить, добавить или удалить.</li>
                    <li><strong>Обновление виртуального DOM</strong>: React использует виртуальный DOM (Virtual DOM), который является внутренним представлением интерфейса. Он создает новое виртуальное дерево элементов на основе изменений состояния компонента.</li>
                    <li><strong>Эффективные обновления</strong>: React делает эффективные обновления, минимизируя количество фактических изменений в реальном DOM. Он определяет, какие элементы действительно нужно обновить, и применяет только эти изменения в реальном DOM, чтобы избежать ненужных операций.</li>
                </ul>
            </div> 
        </>
    )
}
export default VirtualDOM;